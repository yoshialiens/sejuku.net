
<div class="section clearfix">
	<div class="contain-to-grid clearfix">
		<div class="twelve columns section-heading">
			<h1 class="twelve columns section-title">二ヶ月でウェブサービスを作る方法</h1>
			<h3 class="twelve columns section-subtitle"></h3>
		</div>
	</div>
	<div class="row page-container">
		このぺーじではプログラミング初心者が最短でWEBサービスを作る方法をお教えします。<br/>
		HTML,CSS,Rubyの基礎がわかった状態で300時間ほど学習すれば、独学でもWEBサービスを作ることは出来ます。<br/>
		WEBサービス開発に必要なWEBフレームワークの学習方法と、<br/>
		具体的なWEBサービス開発の仕方までお教えします。<br/>
	</div>
</div>

<div class="section clearfix">
	<div class="contain-to-grid clearfix">
		<div class="twelve columns section-heading">
			<h1 class="twelve columns section-title">Ruby on Railsのインストール</h1>
			<h3 class="twelve columns section-subtitle"></h3>
		</div>
	</div>
	<div class="row page-container">
    Railsの学習に入る前にRailsをインストールする必要があります。<br/>
    今回使用するのはrails3.2です。<br/>
    <br/>
    Mac OS Xの場合<br/>
    　gem install rails -v "3.2.13"<br/>
    以上のコマンドを打つだけでインストールが完了します。<br/>
    処理中は数分画面が変わらないこともありますが、気長に待ちましょう。<br/>
    　<br/>
    Windowsの場合<br/>
    <a href="http://www.rubylife.jp/railsinstall/" target="_blank">http://www.rubylife.jp/railsinstall/</a><br/>
    こちらを参考にして下さい。<br/>
    　gem install rails<br/>
    を打つときにバージョンを指定する必要が有るので、<br/>
    　gem install rails -v "3.2.13"<br/>
    以上のように打ち込んで下さい。<br/>
    <br/>
    環境構築は、お使いのPCによって環境が違いますので、躓くポイントが人それぞれです。<br/>
    何かわからないこと、躓いた事があれば、<a href="/questions" target="_blank">こちらのQ&Aフォームをお使い下さい。</a><br/>
	</div>
</div>

<div class="section clearfix">
	<div class="contain-to-grid clearfix">
		<div class="twelve columns section-heading">
			<h1 class="twelve columns section-title">Webフレームワーク基礎</h1>
			<h3 class="twelve columns section-subtitle"></h3>
		</div>
	</div>
	<div class="row page-container">
		■Ruby on Rails<br/>
		Ruby on Rails（以下Rails）はRubyで書かれたオープンソースのWebサービス用フレームワークです。<br/>
		侍エンジニア塾ではこのRailsを推奨しています。<br/>
		Railsは他のフレームワークより少ないコードで簡単・効率よく開発できるよう考慮し設計されています。<br/>
		そのため初心者でも数十時間学習すれば簡単なWEBサービスを作ることができる優れものです。<br/>
		<br/>
		■Railsの学習方法<br/>
		ドットインストール<br/>
    <a href="http://dotinstall.com/lessons/basic_rails" target="_blank">http://dotinstall.com/lessons/basic_rails</a><br/>
		お勧めサイト<br/>
    <a href="http://www.rubylife.jp/rails/" target="_blank">http://www.rubylife.jp/rails/</a><br/>
		お勧め書籍<br/>
    <a href="http://www.amazon.co.jp/dp/4774146633" target="_blank">http://www.amazon.co.jp/dp/4774146633</a><br/>
		習得時間目安<br/>
		50時間<br/>
		Railsの場合はドットインストール＋書籍をお勧めします。<br/>
		一通りドットインストールをやってみて、もう一回わからないところを書籍で見ながらドットインストールを2週します。<br/>
		そうすると大体基礎が把握できるようになるでしょう。<br/>
	</div>
</div>

<div class="section clearfix">
	<div class="contain-to-grid clearfix">
		<div class="twelve columns section-heading">
			<h1 class="twelve columns section-title">Webフレームワーク応用</h1>
			<h3 class="twelve columns section-subtitle"></h3>
		</div>
	</div>
	<div class="row page-container">
		■Webフレームワークの応用的学習<br/>
		さて、WEBフレームワークの基礎を書籍やドットインストールで学んだあとは応用編です。<br/>
		ここまでは、教材というレールの上を走っていましたが、ここからは、敢えてそのレールを外れていきます。<br/>
		そうすることによって、自分で「考えて、調べて、書いてみて、修正して」というプログラマーとしての基本が身につきます。<br/>
		<br/>
		具体的には以下の手順で学習を続けます。<br/>
		①ドットインストールか書籍のサンプルアプリケーションを作る<br/>
		②そのサンプルの改善案を10個考える。<br/>
		　Ex）『Facebookログイン機能』『データに画像を追加』『並び替え機能』etc<br/>
		③その改善案を簡単そうなものから実装してみる。<br/>
		④その前にサンプルをコピーしてバックアップしておく<br/>
		（改善していく中で、失敗をしてファイルがグチャグチャなりやすいので）<br/>
		④まずは書籍やインターネットを活用して調査。<br/>
		　その際は『rails』と機能をあわせて検索 → Ex)『rails facebookログイン』<br/>
		⑤見つけた文献をもとに実際にやって見る。<br/>
		⑥エラーが出たらググッて解決してみる。<br/>
		⑦なんどもトライしてダメなら他の機能からやって見る。<br/>
		<br/>
		■うまくいかないときは？<br/>
		基本的に応用学習では、レールを外れているので、よく間違いを起こします。<br/>
		これは独学なので致し方がないことです。<br/>
		なので、イライラするのではなく、『独学でつまづくのは当たり前、成長してる証拠』と考えましょう。<br/>
		<br/>
		また、うまくいかないときはエラーが出ていないか調べましょう。<br/>
		Railsのエラーは/log/development.rbの中に記述されます。<br/>
		Javascriptのエラーはブラウザの開発者モードのコンソールに表示されます。<br/>
		エラーが出ていた場合はエラーメッセージをググッてみましょう。<br/>
		解決策につながる記事が見つかるでしょう。<br/>
		<br/>
		エラーが出ない場合や、どうしても出来ない場合は、バックアップをしておいて、復元します。<br/>
		そして、④からやり直して別の文献を参考にしてみましょう。<br/>
		<br/>
		■もし相談できるプログラマーがいれば<br/>
		もし気軽に相談できるプログラマーが入れば聞きましょう。<br/>
		返答を待っている間は別のことをやって気長に待ちましょう。<br/>
		<br/>
		また、友人でなくても、ネット上で質問できるサービスはたくさんあります。<br/>
		『プログラミング　Q&A』<br/>
		などで調べれば出てきます。<br/>
		<br/>
		やはりどんな学習でも、出来る人に教わるのが一番早いです。<br/>
		侍エンジニア塾ではマンツーマンのプログラミングレッスンをやっているので、気になる方は<a href="/pages/lesson" target="_blank">こちら</a>からどうぞ。<br/>

	</div>
</div>

<div class="section clearfix">
	<div class="contain-to-grid clearfix">
		<div class="twelve columns section-heading">
			<h1 class="twelve columns section-title">Webサービス開発</h1>
			<h3 class="twelve columns section-subtitle"></h3>
		</div>
	</div>
	<div class="row page-container">
		ここまで来た貴方はもはやプログラマーです。<br/>
		なぜならば、自分ひとりで機能を考え、調査し、実装し、修正することができるからです。<br/>
		ここまで来れば、自分でWebサービスを開発することは難しくありあせん。<br/>
		<br/>
		これから紹介するステップを参考に何らかのWebサービスを『作品』として作ってみてください。<br/>
		自分の『作品』としてWebサービスを作ってみると、世界観が変わります。<br/>
		『自分でWebサービスを作れた』という実感があなたの自信になります。<br/>
		<br/>
		独学で、Webサービスを作れる人間は多いようで少ないです。<br/>
		ほとんどの方が、そこにいたるまでに諦めてしまうことがほとんどです。<br/>
		このハードルを乗り越えた方にはその後の仕事や、出会いや、成功が待っています。<br/>
		<br/>
		根気づよく、自分の作りたいものを形にしてみてください。<br/>
		<br/>
		■WEBサービスの作り方　リーンスタートアップ式開発手法<br/>
		WEBサービスを開発したい方なら『リーンスタートアップ』という言葉を一度は聞いたことがあるかもしれません。<br/>
		詳しい解説は以下のまとめをたどっていただいて、<br/>
    <a href="http://matome.naver.jp/odai/2131171854325173701" target="_blank">http://matome.naver.jp/odai/2131171854325173701</a><br/>
		書籍など読むと勉強になると思います。<br/>
		ざっくりな説明をすると、リーンスタートアップとは「無駄のない」開発手法で、仮説立案と仮説検証のサイクルを最短最速でまわす手法です。<br/>
		簡単に言うと「アイデアを少しずつ少しずつ形にしていって、検証をし、軌道修正していく」やり方です。<br/>
		昔のソフトウェア開発では、数ヶ月かけてアイデアをブラッシュアップして、数ヶ月かけて設計をして、数ヶ月をかけて製品化して、というプロセスが一般的でした。<br/>
		ですが、この手法では製品化するまで、ほとんど仮説検証（実際にユーザーに使ってもらい意見をもらうなど）をしないので、「莫大な予算をかけて作ったのに売れなかった」なんてことが起こりえるのです。<br/>
		逆にリーンスタートアップでは、アイデアをプロトタイピングし、紙やワイヤーフレーム、必要最低限の機能が詰まったシステムなどを作ります。<br/>
		その上でターゲットユーザーに使ってもらいフィードバックを得ます。<br/>
		このフィードバックを活用して、アイデアや設計を修正していくので、無駄のない開発ができます。<br/>
		本レポートではリーンスタートアップ方式を使ったWEBサービス開発のやり方について説明していきます。<br/>
		<br/>
		■WEBサービスの作り方<br/>
		Step1 アイデア<br/>
		WEBサービス開発にとってのアイデアは、中心になる最も大切な部分です。<br/>
		そんなWEBサービス開発にかかせない、WEBサービスのアイデアはいかに生み出すのでしょうか？<br/>
		ここではビジネスアイデアを考える発想法をいくつか紹介いたします。<br/>
		<br/>
		①『不』から考える<br/>
		不安、不便、不満、不可、不愉快<br/>
		我々の生活には沢山の『不』があります。<br/>
		これらのニーズを解決するアイデアを考える発想法です。<br/>
		<br/>
		例）<br/>
		買いたい本を探して本屋を回るのが不便　⇛　Amazon<br/>
		<br/>
		②自分ニーズ発想法<br/>
		自分の普段の生活や興味が有ることに関連している欲しいサービスを考えます。<br/>
		<br/>
		例）<br/>
		美味しいものを食べるのが好きだけど、美味しい店を探すのが大変　⇛　食べログ<br/>
		<br/>
		③社会ニーズ発想法<br/>
		社会問題、社会に今必要とされていることを見つけ出し、それらを解決するサービスを考えます。<br/>
		<br/>
		例）<br/>
		社会問題に取り組む非営利団体が資金集めで苦労している　⇛　Ready for ? （クラウドファンディング）<br/>
		<br/>
		④実際にあるアイデアからヒントを得る<br/>
		世の中には既に、無数の先人たちとアイデアが存在します。<br/>
		人が考えたアイデアからヒントを得るために、まずは大量にアイデアを情報収集します。<br/>
		ある一定量アイデアを知ると、自分の頭の中がアップグレードされ、より良いアイデアを発送する準備が整います。<br/>
		<br/>
		ニュースサイトで常に情報を収集したり、様々なウェブサービスを自分でさわってみるのをおすすめします。<br/>
		<br/>
		<br/>
		Step2 設計<br/>
		ここでいう設計とはアイデアを実現可能にするため、設計図や機能リストを書き起こすことです。<br/>
		私がいつもやる設計手法は以下の流れです。<br/>
		①サービスの目的とそれを実現する機能を紙に書き出す。<br/>
		サービスは目的が命です。<br/>
		誰のどういった課題を解決するのか？<br/>
		これに尽きます。<br/>
		この目的を実現するために必要な機能をリスト化します。<br/>
		サービスの良し悪しはこの仮説が当たるかで大きく変わります。<br/>
		たとえば食べログのようなサービスの場合<br/>
		目的は「飲食店の口コミを共有して、より質の高いグルメ体験を支援する」<br/>
		が目的だとすると、必要最低限の機能として<br/>
		・店舗データを検索する機能<br/>
		・ユーザーログインをして口コミを投稿する機能<br/>
		などが考えられます。<br/>
		②サービスイメージを紙に書き出す（ワイヤーフレーム）<br/>
		目的と機能が決まったら、その機能を紙に絵として書き出します。<br/>
		プロはワイヤーフレームといいますが、そこまでちゃんとしたものでなくてもかまいません。<br/>
		大体自分の頭にあるものを自分で整理するために使います。<br/>
		紙でやってもいいですし、デジタルネイティブはPhotoshopやCaccoなど使ってみるのもいいでしょう。<br/>
		③機能を実現するためのタスクを書き出す。<br/>
		先ほどだした機能を実現するためには様々なタスクが必要になってきます。<br/>
		まずは「プロジェクトを作成する」や「サーバーを設定する」などの準備が必要ですし、<br/>
		たとえば食べログのようなサービスの場合「店舗の口コミを検索する」という機能を実装するには<br/>
		「店舗データを作成する」というタスクが必要です。<br/>
		ここら辺のイメージは実際にWEBサービスを開発してみないとなかなかイメージがわかないと思います。<br/>
		<br/>
		Step3 実装<br/>
		WEBサービスを実際に開発するときはメインの機能（必要最低限の機能）から優先順位をつけ実装していきます。<br/>
		たとえば食べログのようなサービスの場合以下のような開発手順になります。<br/>
		①店舗データを作る<br/>
		②店舗データの一覧を表示する<br/>
		③店舗データの並び替えをできるようにする<br/>
		④店舗データを検索できるようにする<br/>
		⑤会員ログイン機能を作る<br/>
		⑥会員が店舗データを書き込めるようにする<br/>
		設計の段階で必要な機能と優先順位がわかっていれば、調べながら実装していくだけです。<br/>
		こうやって、まずはアイデアを形にするうえで、必要最低限のプロトタイプを作ります。<br/>
		<br/>
		Step4 仮説検証＋軌道修正<br/>
		プロトタイプが出来上がったら、それをユーザー像に近い人に触ってもらいましょう。<br/>
		実際にユーザーに触ってもらうことで、フィードバックをもらい軌道修正していきます。<br/>
		ユーザーが必要としている機能や、そもそも、そのアイデアが世の中に求められているものなのかが見えてきます。<br/>
		フィードバックを得たら取捨選択をして、必要であれば勇気を持って大胆にアイデアを軌道修正しましょう。<br/>
		このステップが終わったらStep1やStep2に戻ってサイクルをまわしましょう。<br/>
		これがリーンスタートアップ式WEBサービス開発です。<br/>
		つまり、この方式では完成という概念がありません。<br/>
		どこまでがプロトタイプでどこまでが製品なのかは、開発側の判断です。<br/>
		考え方にもよりますが、サービスで課金をするまでは、バグがあっても、しょぼくてもぜんぜんかまわないと思います。<br/>
		それよりも、アイデアをいかに早く形にして、プレゼンテーションをして、実現に必要なお金や人や情報を集めるほうが大切といえます。<br/>
		そのように考えれば、気軽にWEBサービスを作ることができるのではないでしょうか。<br/>
	</div>
</div>

<div class="section clearfix">
	<div class="contain-to-grid clearfix">
		<div class="twelve columns section-heading">
			<h1 class="twelve columns section-title">何かわからないことがあったら</h1>
			<h3 class="twelve columns section-subtitle"></h3>
		</div>
	</div>
	<div class="row page-container">
		ここまで駆け足でWebサービス開発をお教えしてきました。<br/>
		言葉足らずでわから無いところも多いでしょう。<br/>
		ということで、聞きたいことがある方は専用の<a href="/questions" target="_blank">Q&Aフォーム</a>にメッセージを下さい。<br/>
		このレポートに関することやプログラミングに関することで聞きたいことがあれば『何でも』答えさせていただきます。<br/>
		また、セミナーや無料相談なんかもやっているのでぜひご利用ください。<br/>
    『とにかく早くマスターしたい』『一人で学ぶ自信がない』という方は、マンツーマンレッスンがお勧めです。<br/>
    <a href="/pages/lesson" target="_blank">こちらから</a>受講無料相談を受け付けております。</br>
		<br/>
		少しでも早く、貴方にプログラミングを習得していただいて、Webサービスを作る楽しさを感じて欲しいと願っております。<br/>
		最後までお読み頂いてありがとうございます。<br/>
		またQ&Aやセミナー、無料相談などでお会いできることを楽しみにしております^^<br/>
	</div>
</div>
